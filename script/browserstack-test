#!/bin/bash

AUT_UPLOAD_URL="https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/app"
TEST_SUITE_UPLOAD_URL="https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/test-suite"
TEST_BUILD_URL="https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/build"
AUT_APP_PATH="@/Users/christopher.frey/development/learning/flutter_app_playground/build/app/outputs/apk/debug/app-debug.apk"
TEST_APP_PATH="@/Users/christopher.frey/development/learning/flutter_app_playground/build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
APP_URL=""
TEST_SUITE_URL=""
BS_PROJECT_NAME="flutter_app_playground-Patrol-2.2.5"
BS_LOCAL_TESTING="false"

echo
echo "==> -load-env: loading environment…"
if [ -f .env ]; then
    # Load .env vars
    . .env

    echo "BS_USERNAME =====> ${BS_USERNAME}"
    echo "BS_ACCESS_TOKEN =====> ${BS_ACCESS_TOKEN}"
    
    if [[ "${BS_USERNAME}" = "" || "${BS_ACCESS_TOKEN}" = "" ]]; then
        echo
        echo "    ERROR: Missing BS_USERNAME or BS_ACCESS_TOKEN, please supply these values in your .env file."
        echo
        exit 1;
    fi
else
    echo
    echo "    ERROR: Missing .env file."
    echo
    exit 1;
fi


# Build Apps
function build_apps() {
    echo
    echo "==> Build AUT and Test Apps…"
        
    patrol build android \
        --target integration_test/button_test.dart \
        --debug \
        --verbose;

    echo "==> Finished building AUT and Test Apps…"
}

# Upload AUT App
function upload_aut_app() {
    echo
    echo "==> Upload AUT app to Browserstack…"

    curl -u "${BS_USERNAME}:${BS_ACCESS_TOKEN}" \
        -X POST "${AUT_UPLOAD_URL}" \
        -F "file=${AUT_APP_PATH}" \
        -F "custom_id=flutter_app_playground_Test_App" \
        --output curl.output \
        --write-out %{http_code} \
        > http.response.code 2> error.messages

        RESPONSE_CODE=$(cat http.response.code)
        RESPONSE=$(cat curl.output)

    echo "Upload AUT app to Browserstack cURL response code => $RESPONSE_CODE"
    echo "Upload AUT app to Browserstack cURL response => $RESPONSE"

    if [ "$RESPONSE_CODE" != "200" ]; then
        RESPONSE_ERROR=$(cat error.messsages)
        echo -e "Error making Upload AUT app to Browserstack request, http response code: $RESPONSE_CODE)"
        echo "Error message => $RESPONSE_ERROR"
    else
        APP_URL=$(echo "$RESPONSE" | jq -r '.app_url')
        echo "APP_URL => $APP_URL"
    fi
}

# Upload Test App
function upload_test_app() {
    echo
    echo "==> Upload Test app to Browserstack…"

    curl -u "${BS_USERNAME}:${BS_ACCESS_TOKEN}" \
        -X POST "${TEST_SUITE_UPLOAD_URL}" \
        -F "file=${TEST_APP_PATH}" \
        --output curl.output \
        --write-out %{http_code} \
        > http.response.code 2> error.messages

        RESPONSE_CODE=$(cat http.response.code)
        RESPONSE=$(cat curl.output)

    echo "Upload Test app to Browserstack cURL response code => $RESPONSE_CODE"
    echo "Upload Test app to Browserstack cURL response => $RESPONSE"

    if [ "$RESPONSE_CODE" != "200" ]; then
        RESPONSE_ERROR=$(cat error.messsages)
        echo -e "Error making Upload Test app to Browserstack request, http response code: $RESPONSE_CODE)"
        echo "Error message => $RESPONSE_ERROR"
    else
        TEST_SUITE_URL=$(echo "$RESPONSE" | jq -r '.test_suite_url')
        echo "TEST_SUITE_URL => $TEST_SUITE_URL"
    fi
}

# Execute test run
function execute_test_run() {
    echo
    echo "==> Execute Browserstack test run..."

    curl -u "${BS_USERNAME}:${BS_ACCESS_TOKEN}" \
        -X POST "${TEST_BUILD_URL}" \
        -d '{
        "app": "'"${APP_URL}"'",
        "testSuite": "'"${TEST_SUITE_URL}"'",
        "devices": ["Google Pixel 3 XL-9.0"],
        "project": "'"${BS_PROJECT_NAME}"'",
        "video": "true",
        "debug": "true",
        "networkLogs": "true",
        "deviceLogs": "true",
        "video": "true",
        "autoGrantPermissions" : "true",
        "local": "'"${BS_LOCAL_TESTING}"'"
        }' \
        -H "Content-Type: application/json" \
        --output curl.output \
        --write-out %{http_code} \
        > http.response.code 2> error.messages

        RESPONSE_CODE=$(cat http.response.code)
        RESPONSE=$(cat curl.output)

    echo "Execute Browserstack test run response code => $RESPONSE_CODE"
    echo "Execute Browserstack test run cURL response => $RESPONSE"

    if [ "$RESPONSE_CODE" != "200" ]; then
        RESPONSE_ERROR=$(cat error.messsages)
        echo -e "Error making Execute Browserstack test run request, http response code: $RESPONSE_CODE)"
        echo "Error message => $RESPONSE_ERROR"
    else
        BUILD_MESSAGE=$(echo "$RESPONSE" | jq -r '.message')
        BUIILD_ID=$(echo "$RESPONSE" | jq -r '.build_id')
        echo "BUILD_MESSAGE => ${BUILD_MESSAGE} || BUIILD_ID => $BUIILD_ID"
    fi
}

############## CLEAN OUTPUT FILES ##############
function cleanup_files() {
    if [ -f curl.output ]; then
        rm curl.output
    fi

    if [ -f error.messages ]; then
        rm error.messages
    fi

    if [ -f http.response.code ]; then
        rm http.response.code
    fi
}

build_apps
upload_aut_app
upload_test_app
execute_test_run
cleanup_files
